#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1204 0 20 3 2 #"1."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"bitfunc"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")) "
0 0 20 3 2 #"14"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";usage like: (bitfunc 2); -> 6"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"2."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"bitfunc-rect"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 7 #"bitfunc"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";usage like: (bitfunc-rect 2 4); -> 12"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"3."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 22 #"bitfunc-integral-recur"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 12 #"bitfunc-rect"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 12 #"bitfunc-rect"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #" ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 5 #"))) ("
0 0 14 3 22 #"bitfunc-integral-recur"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #") ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";usage like: (bitfunc-integral-recur 10000 2 4) ; -> "
0 6          10 17 36 #"590754585708333333/3125000000000000\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"bitfunc-integral-iter"
0 0 22 3 1 #" "
0 0 14 3 3 #"sum"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 3 #"sum"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 21 #"bitfunc-integral-iter"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 3 #"sum"
0 0 22 3 2 #" ("
0 0 14 3 12 #"bitfunc-rect"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #" ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 6 #")))) ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #") ( "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 17 3 54 #";usage like: (bitfunc-integral-iter 0 10000 2 4) ; -> "
0 6          10 17 42 #"590593368705908412999/3125000000000000000\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";the initial value of sum must be 0."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"4."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"integral"
0 0 22 3 1 #" "
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 22 3 1 #"("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 4 #")  ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 4 #")) ("
0 0 14 3 8 #"integral"
0 0 22 3 1 #" "
0 0 14 3 4 #"func"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      ))"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";usage like:(define (func"
0 0 17 3 6 #" x) (-"
0 0 17 3 3 #" (+"
0 0 17 3 8 #" (expt x"
0 0 17 3 2 #" 4"
0 0 17 3 18 #") (expt x 2)) 14))"
0 0 22 29 1 #"\n"
0 0 17 3 22 #";usage like:(integral "
0 0 17 3 4 #"func"
0 0 17 3 15 #" 10000 3 5); ->"
0 6          10 17 37 #"1815658337458333333/3125000000000000\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"5."
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"approx-pi"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #"))) ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 6 #")))  ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 4 #")) ("
0 0 14 3 9 #"approx-pi"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      ))"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";usage like: (* 4 (approx-pi 10000 0 1)); -> 3.141791477611328"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"6."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 22 3 1 #" "
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"trapezoid-func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 4 #")  ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 20 3 3 #"0.5"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")) "
0 0 20 3 2 #"14"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"integral-with"
0 0 22 3 1 #" "
0 0 14 3 9 #"rectangle"
0 0 22 3 1 #" "
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 4 #")  ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 4 #")) ("
0 0 14 3 13 #"integral-with"
0 0 22 3 1 #" "
0 0 14 3 9 #"rectangle"
0 0 22 3 1 #" "
0 0 14 3 4 #"func"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      ))"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";usage like: "
0 0 17 3 1 #"("
0 0 17 3 13 #"integral-with"
0 0 17 3 1 #" "
0 0 17 3 14 #"rectangle func"
0 0 17 3 1 #" "
0 0 17 3 5 #"10000"
0 0 17 3 1 #" "
0 0 17 3 2 #"2 "
0 0 17 3 7 #"4); -> "
0 6          10 17 36 #"590754585708333333/3125000000000000\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"integral-with"
0 0 22 3 1 #" "
0 0 14 3 14 #"trapezoid-func"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 20 3 3 #"0.5"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"func"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 3 #") ("
0 0 14 3 4 #"func"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 6 #") )) ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 2 #") "
0 0 20 3 3 #"0.5"
0 0 22 3 4 #")) ("
0 0 14 3 13 #"integral-with"
0 0 22 3 1 #" "
0 0 14 3 14 #"trapezoid-func"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"         )))"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";usage like: "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"7."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"better-pi"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #"))) ("
0 0 14 3 4 #"sqrt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 6 #")))) ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 20 3 3 #"0.5"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 6 #")))  ("
0 0 14 3 4 #"sqrt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 20 3 1 #"2"
0 0 22 3 6 #")))) ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 9 #"better-pi"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 9 #"num-steps"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #" "
0 0 14 3 2 #"x1"
0 0 22 3 2 #") "
0 0 14 3 9 #"num-steps"
0 0 22 3 3 #")) "
0 0 14 3 2 #"x2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      ))"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";usage like: (* 4 (better-pi 10000 0 1)); -> 3.141591477611335"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"8."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"deriv-variable"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";usage like:"
0 0 17 3 1 #"("
0 0 17 3 14 #"deriv-variable"
0 0 17 3 11 #" 'x 'x);->1"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";usage like:(deriv-variable 'y 'x);->0"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 2 #"9."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"deriv-constant"
0 0 22 3 1 #" "
0 0 14 3 8 #"constant"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"derivative"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 14 #"deriv-variable"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 14 #"deriv-constant"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";usage like:("
0 0 17 3 10 #"derivative"
0 0 17 3 2 #"  "
0 0 17 3 1 #"3"
0 0 17 3 8 #" 'x);->0"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";usage like:"
0 0 17 3 1 #"("
0 0 17 3 10 #"derivative"
0 0 17 3 2 #"  "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 2 #" '"
0 0 17 3 6 #"x);->1"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 3 #"10."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"deriv-sum"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 10 #"derivative"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")) "
0 0 14 3 3 #"wrt"
0 0 22 3 3 #") ("
0 0 14 3 10 #"derivative"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #"))) "
0 0 14 3 3 #"wrt"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";usage like:(deriv-sum '(+ "
0 0 17 3 2 #"x "
0 0 17 3 10 #"3) 'x);->("
0 0 17 3 6 #"+ 1 0)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 3 #"11."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"deriv-product"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 10 #"derivative"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #"))) "
0 0 14 3 3 #"wrt"
0 0 22 3 3 #") )"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 10 #"derivative"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")) "
0 0 14 3 3 #"wrt"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";usage like:("
0 0 17 3 16 #"deriv-product '("
0 0 17 3 2 #"* "
0 0 17 3 2 #"x "
0 0 17 3 1 #"3"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 2 #"x)"
0 0 17 3 4 #";->("
0 0 17 3 3 #"+ ("
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 5 #"0) (*"
0 0 17 3 1 #" "
0 0 17 3 5 #"1 3))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 20 3 3 #"12."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"deriv-a^x"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"wrt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"log"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #"))  "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";usage like:"
0 0 17 3 1 #"("
0 0 17 3 9 #"deriv-a^x"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"^"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"x"
0 0 17 3 3 #"); "
0 0 17 3 2 #"->"
0 0 17 3 1 #"("
0 0 17 3 1 #"*"
0 0 17 3 2 #" ("
0 0 17 3 3 #"log"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #") ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"^"
0 0 17 3 1 #" "
0 0 17 3 3 #"x))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0           0
